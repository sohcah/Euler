In progress:
0043
0740
working from 0045 forward
working from 0741 forward
working from 0739 backward


0001 Only brute force
0002 Only brute force
0003 Sieves as it goes starting with 2 and odds (3+) up to sqrt of target numbers
0004 Exhaustive!
0005 Algorithm avoiding need for prime factorisation!
0006 Formulaic approach to triangle numbers and sums of squares! (-:
0007 Sieve method, but crude approach to how big initial set (2 and 3+ odds) should be - might fail for sufficiently large n
0008 test would fail with start like 8709999 I think! (early zero with maxprod before second zero)
0009 Only finds first one (if more than one answer); not sure about max possible b.
0010 Fairly decent, but would fail if result became too big.
0011 Nothing available to test it thoroughly, but works!
0012 Factoring triangle numbers. Brute force but quick!
0013 I've assumed first 13 digits is enough for 10 digit accuracy?
0014 Longest Collatz sequence! Trying to be clever failed but brute force v2 succeeded!
0014v2 brute force succeeded!
0015 Should work if width and height are different - based on factorials but not evaluating factorials!
0016 Handles large numbers in 10-digit groups in an array (rather than bigint)
0017 Just does the maths!
0018 Done in clever way so 67 should be a doddle!
0019 Doesn't use input yet but solves specific problem!
0020 Used BigInt!
0021 Sum of all amicable numbers under 10000 - relatively well done!
0022 Names scores - done!
0023 Non-abundant sums - repurposed factor finding from 0021

0030 Crude and no real thought about i loop (from 2 to 1000000 rather arbitrarily!)
0031 Ways to make Â£2. Fairly decent recursive approach!
0032

0740 need to account for the fact that dipping in and getting own and putting back increases chances of valid possibilities that begin the same way!

To do:
0001v2 clever maths version using lcm's (and lcm's of lcm's ...!) and triangle numbers!
0002v2 based on Odd Even, Even Odd, Odd Odd or Even Even start, approach based only on calculating evens for any integer start pair?
0003v2 Only when I've looked into most effective methods for prime set generation!
0004v2 Work out from largest possible product down so it can stop immediately on success?
0007v2 number of primes less than n (over-)estimating function?
0008v2 check for (and deal with) early zero issue!
0009v2 In cases where there is more than one possible abc combination find them all?
0010v2 maybe bigint if needed?
0011v2 could do it for other than n = 4 and try it on grid reflected in vertical or diagonal to see if it's likely working fully!
0012v2 is there a fancy approach? or a function to avoid using sqrt?
0013v2 calculate how many digits is necessary depending on how many numbers in sum
0016v2
0017v2 could produce the actual text!
0019v2 could generalise in lots of ways!!
0020v2 could try without using BigInt?

0030v2 Much to improve - sensible loop size? better approach (1234 and 4321 and 2413 could all be checked at once?)